// system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.1 922

`timescale 1 ps / 1 ps
module system_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                 //                               clk_0_clk.clk
		input  wire        mm_bridge_0_reset_reset_bridge_in_reset_reset, // mm_bridge_0_reset_reset_bridge_in_reset.reset
		input  wire [3:0]  mm_bridge_0_m0_address,                        //                          mm_bridge_0_m0.address
		output wire        mm_bridge_0_m0_waitrequest,                    //                                        .waitrequest
		input  wire [0:0]  mm_bridge_0_m0_burstcount,                     //                                        .burstcount
		input  wire [0:0]  mm_bridge_0_m0_byteenable,                     //                                        .byteenable
		input  wire        mm_bridge_0_m0_read,                           //                                        .read
		output wire [7:0]  mm_bridge_0_m0_readdata,                       //                                        .readdata
		output wire        mm_bridge_0_m0_readdatavalid,                  //                                        .readdatavalid
		input  wire        mm_bridge_0_m0_write,                          //                                        .write
		input  wire [7:0]  mm_bridge_0_m0_writedata,                      //                                        .writedata
		input  wire        mm_bridge_0_m0_debugaccess,                    //                                        .debugaccess
		output wire [1:0]  pio_0_s1_address,                              //                                pio_0_s1.address
		output wire        pio_0_s1_write,                                //                                        .write
		input  wire [31:0] pio_0_s1_readdata,                             //                                        .readdata
		output wire [31:0] pio_0_s1_writedata,                            //                                        .writedata
		output wire        pio_0_s1_chipselect                            //                                        .chipselect
	);

	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;   // mm_bridge_0_m0_agent:av_waitrequest -> mm_bridge_0_m0_translator:uav_waitrequest
	wire   [7:0] mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;      // mm_bridge_0_m0_agent:av_readdata -> mm_bridge_0_m0_translator:uav_readdata
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;   // mm_bridge_0_m0_translator:uav_debugaccess -> mm_bridge_0_m0_agent:av_debugaccess
	wire   [3:0] mm_bridge_0_m0_translator_avalon_universal_master_0_address;       // mm_bridge_0_m0_translator:uav_address -> mm_bridge_0_m0_agent:av_address
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_read;          // mm_bridge_0_m0_translator:uav_read -> mm_bridge_0_m0_agent:av_read
	wire   [0:0] mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;    // mm_bridge_0_m0_translator:uav_byteenable -> mm_bridge_0_m0_agent:av_byteenable
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid; // mm_bridge_0_m0_agent:av_readdatavalid -> mm_bridge_0_m0_translator:uav_readdatavalid
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_lock;          // mm_bridge_0_m0_translator:uav_lock -> mm_bridge_0_m0_agent:av_lock
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_write;         // mm_bridge_0_m0_translator:uav_write -> mm_bridge_0_m0_agent:av_write
	wire   [7:0] mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;     // mm_bridge_0_m0_translator:uav_writedata -> mm_bridge_0_m0_agent:av_writedata
	wire   [0:0] mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;    // mm_bridge_0_m0_translator:uav_burstcount -> mm_bridge_0_m0_agent:av_burstcount
	wire         rsp_mux_src_valid;                                                 // rsp_mux:src_valid -> mm_bridge_0_m0_agent:rp_valid
	wire  [46:0] rsp_mux_src_data;                                                  // rsp_mux:src_data -> mm_bridge_0_m0_agent:rp_data
	wire         rsp_mux_src_ready;                                                 // mm_bridge_0_m0_agent:rp_ready -> rsp_mux:src_ready
	wire   [0:0] rsp_mux_src_channel;                                               // rsp_mux:src_channel -> mm_bridge_0_m0_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                         // rsp_mux:src_startofpacket -> mm_bridge_0_m0_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                           // rsp_mux:src_endofpacket -> mm_bridge_0_m0_agent:rp_endofpacket
	wire  [31:0] pio_0_s1_agent_m0_readdata;                                        // pio_0_s1_translator:uav_readdata -> pio_0_s1_agent:m0_readdata
	wire         pio_0_s1_agent_m0_waitrequest;                                     // pio_0_s1_translator:uav_waitrequest -> pio_0_s1_agent:m0_waitrequest
	wire         pio_0_s1_agent_m0_debugaccess;                                     // pio_0_s1_agent:m0_debugaccess -> pio_0_s1_translator:uav_debugaccess
	wire   [3:0] pio_0_s1_agent_m0_address;                                         // pio_0_s1_agent:m0_address -> pio_0_s1_translator:uav_address
	wire   [3:0] pio_0_s1_agent_m0_byteenable;                                      // pio_0_s1_agent:m0_byteenable -> pio_0_s1_translator:uav_byteenable
	wire         pio_0_s1_agent_m0_read;                                            // pio_0_s1_agent:m0_read -> pio_0_s1_translator:uav_read
	wire         pio_0_s1_agent_m0_readdatavalid;                                   // pio_0_s1_translator:uav_readdatavalid -> pio_0_s1_agent:m0_readdatavalid
	wire         pio_0_s1_agent_m0_lock;                                            // pio_0_s1_agent:m0_lock -> pio_0_s1_translator:uav_lock
	wire  [31:0] pio_0_s1_agent_m0_writedata;                                       // pio_0_s1_agent:m0_writedata -> pio_0_s1_translator:uav_writedata
	wire         pio_0_s1_agent_m0_write;                                           // pio_0_s1_agent:m0_write -> pio_0_s1_translator:uav_write
	wire   [2:0] pio_0_s1_agent_m0_burstcount;                                      // pio_0_s1_agent:m0_burstcount -> pio_0_s1_translator:uav_burstcount
	wire         pio_0_s1_agent_rf_source_valid;                                    // pio_0_s1_agent:rf_source_valid -> pio_0_s1_agent_rsp_fifo:in_valid
	wire  [74:0] pio_0_s1_agent_rf_source_data;                                     // pio_0_s1_agent:rf_source_data -> pio_0_s1_agent_rsp_fifo:in_data
	wire         pio_0_s1_agent_rf_source_ready;                                    // pio_0_s1_agent_rsp_fifo:in_ready -> pio_0_s1_agent:rf_source_ready
	wire         pio_0_s1_agent_rf_source_startofpacket;                            // pio_0_s1_agent:rf_source_startofpacket -> pio_0_s1_agent_rsp_fifo:in_startofpacket
	wire         pio_0_s1_agent_rf_source_endofpacket;                              // pio_0_s1_agent:rf_source_endofpacket -> pio_0_s1_agent_rsp_fifo:in_endofpacket
	wire         pio_0_s1_agent_rsp_fifo_out_valid;                                 // pio_0_s1_agent_rsp_fifo:out_valid -> pio_0_s1_agent:rf_sink_valid
	wire  [74:0] pio_0_s1_agent_rsp_fifo_out_data;                                  // pio_0_s1_agent_rsp_fifo:out_data -> pio_0_s1_agent:rf_sink_data
	wire         pio_0_s1_agent_rsp_fifo_out_ready;                                 // pio_0_s1_agent:rf_sink_ready -> pio_0_s1_agent_rsp_fifo:out_ready
	wire         pio_0_s1_agent_rsp_fifo_out_startofpacket;                         // pio_0_s1_agent_rsp_fifo:out_startofpacket -> pio_0_s1_agent:rf_sink_startofpacket
	wire         pio_0_s1_agent_rsp_fifo_out_endofpacket;                           // pio_0_s1_agent_rsp_fifo:out_endofpacket -> pio_0_s1_agent:rf_sink_endofpacket
	wire         mm_bridge_0_m0_agent_cp_valid;                                     // mm_bridge_0_m0_agent:cp_valid -> router:sink_valid
	wire  [46:0] mm_bridge_0_m0_agent_cp_data;                                      // mm_bridge_0_m0_agent:cp_data -> router:sink_data
	wire         mm_bridge_0_m0_agent_cp_ready;                                     // router:sink_ready -> mm_bridge_0_m0_agent:cp_ready
	wire         mm_bridge_0_m0_agent_cp_startofpacket;                             // mm_bridge_0_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         mm_bridge_0_m0_agent_cp_endofpacket;                               // mm_bridge_0_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                  // router:src_valid -> cmd_demux:sink_valid
	wire  [46:0] router_src_data;                                                   // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                  // cmd_demux:sink_ready -> router:src_ready
	wire   [0:0] router_src_channel;                                                // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                          // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                            // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         pio_0_s1_agent_rp_valid;                                           // pio_0_s1_agent:rp_valid -> router_001:sink_valid
	wire  [73:0] pio_0_s1_agent_rp_data;                                            // pio_0_s1_agent:rp_data -> router_001:sink_data
	wire         pio_0_s1_agent_rp_ready;                                           // router_001:sink_ready -> pio_0_s1_agent:rp_ready
	wire         pio_0_s1_agent_rp_startofpacket;                                   // pio_0_s1_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         pio_0_s1_agent_rp_endofpacket;                                     // pio_0_s1_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         cmd_demux_src0_valid;                                              // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [46:0] cmd_demux_src0_data;                                               // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                              // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [0:0] cmd_demux_src0_channel;                                            // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                      // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                        // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                              // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [46:0] rsp_demux_src0_data;                                               // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                              // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [0:0] rsp_demux_src0_channel;                                            // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                      // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                        // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         cmd_mux_src_valid;                                                 // cmd_mux:src_valid -> pio_0_s1_cmd_width_adapter:in_valid
	wire  [46:0] cmd_mux_src_data;                                                  // cmd_mux:src_data -> pio_0_s1_cmd_width_adapter:in_data
	wire         cmd_mux_src_ready;                                                 // pio_0_s1_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire   [0:0] cmd_mux_src_channel;                                               // cmd_mux:src_channel -> pio_0_s1_cmd_width_adapter:in_channel
	wire         cmd_mux_src_startofpacket;                                         // cmd_mux:src_startofpacket -> pio_0_s1_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_src_endofpacket;                                           // cmd_mux:src_endofpacket -> pio_0_s1_cmd_width_adapter:in_endofpacket
	wire         pio_0_s1_cmd_width_adapter_src_valid;                              // pio_0_s1_cmd_width_adapter:out_valid -> pio_0_s1_agent:cp_valid
	wire  [73:0] pio_0_s1_cmd_width_adapter_src_data;                               // pio_0_s1_cmd_width_adapter:out_data -> pio_0_s1_agent:cp_data
	wire         pio_0_s1_cmd_width_adapter_src_ready;                              // pio_0_s1_agent:cp_ready -> pio_0_s1_cmd_width_adapter:out_ready
	wire   [0:0] pio_0_s1_cmd_width_adapter_src_channel;                            // pio_0_s1_cmd_width_adapter:out_channel -> pio_0_s1_agent:cp_channel
	wire         pio_0_s1_cmd_width_adapter_src_startofpacket;                      // pio_0_s1_cmd_width_adapter:out_startofpacket -> pio_0_s1_agent:cp_startofpacket
	wire         pio_0_s1_cmd_width_adapter_src_endofpacket;                        // pio_0_s1_cmd_width_adapter:out_endofpacket -> pio_0_s1_agent:cp_endofpacket
	wire         router_001_src_valid;                                              // router_001:src_valid -> pio_0_s1_rsp_width_adapter:in_valid
	wire  [73:0] router_001_src_data;                                               // router_001:src_data -> pio_0_s1_rsp_width_adapter:in_data
	wire         router_001_src_ready;                                              // pio_0_s1_rsp_width_adapter:in_ready -> router_001:src_ready
	wire   [0:0] router_001_src_channel;                                            // router_001:src_channel -> pio_0_s1_rsp_width_adapter:in_channel
	wire         router_001_src_startofpacket;                                      // router_001:src_startofpacket -> pio_0_s1_rsp_width_adapter:in_startofpacket
	wire         router_001_src_endofpacket;                                        // router_001:src_endofpacket -> pio_0_s1_rsp_width_adapter:in_endofpacket
	wire         pio_0_s1_rsp_width_adapter_src_valid;                              // pio_0_s1_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [46:0] pio_0_s1_rsp_width_adapter_src_data;                               // pio_0_s1_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire         pio_0_s1_rsp_width_adapter_src_ready;                              // rsp_demux:sink_ready -> pio_0_s1_rsp_width_adapter:out_ready
	wire   [0:0] pio_0_s1_rsp_width_adapter_src_channel;                            // pio_0_s1_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire         pio_0_s1_rsp_width_adapter_src_startofpacket;                      // pio_0_s1_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire         pio_0_s1_rsp_width_adapter_src_endofpacket;                        // pio_0_s1_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire         pio_0_s1_agent_rdata_fifo_src_valid;                               // pio_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] pio_0_s1_agent_rdata_fifo_src_data;                                // pio_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         pio_0_s1_agent_rdata_fifo_src_ready;                               // avalon_st_adapter:in_0_ready -> pio_0_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                     // avalon_st_adapter:out_0_valid -> pio_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                      // avalon_st_adapter:out_0_data -> pio_0_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                     // pio_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                     // avalon_st_adapter:out_0_error -> pio_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (4),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (4),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_0_m0_translator (
		.clk                    (clk_0_clk_clk),                                                     //                       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                              //               (terminated)
		.av_lock                (1'b0),                                                              //               (terminated)
		.uav_clken              (),                                                                  //               (terminated)
		.av_clken               (1'b1),                                                              //               (terminated)
		.uav_response           (2'b00),                                                             //               (terminated)
		.av_response            (),                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                   //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (4),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_0_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (pio_0_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (pio_0_s1_agent_m0_read),                        //                         .read
		.uav_write              (pio_0_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (pio_0_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (pio_0_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (pio_0_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (pio_0_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (pio_0_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (pio_0_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (pio_0_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (pio_0_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (pio_0_s1_write),                                //                         .write
		.av_readdata            (pio_0_s1_readdata),                             //                         .readdata
		.av_writedata           (pio_0_s1_writedata),                            //                         .writedata
		.av_chipselect          (pio_0_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (46),
		.PKT_ORI_BURST_SIZE_L      (44),
		.PKT_RESPONSE_STATUS_H     (43),
		.PKT_RESPONSE_STATUS_L     (42),
		.PKT_QOS_H                 (31),
		.PKT_QOS_L                 (31),
		.PKT_DATA_SIDEBAND_H       (29),
		.PKT_DATA_SIDEBAND_L       (29),
		.PKT_ADDR_SIDEBAND_H       (28),
		.PKT_ADDR_SIDEBAND_L       (28),
		.PKT_BURST_TYPE_H          (27),
		.PKT_BURST_TYPE_L          (26),
		.PKT_CACHE_H               (41),
		.PKT_CACHE_L               (38),
		.PKT_THREAD_ID_H           (34),
		.PKT_THREAD_ID_L           (34),
		.PKT_BURST_SIZE_H          (25),
		.PKT_BURST_SIZE_L          (23),
		.PKT_TRANS_EXCLUSIVE       (18),
		.PKT_TRANS_LOCK            (17),
		.PKT_BEGIN_BURST           (30),
		.PKT_PROTECTION_H          (37),
		.PKT_PROTECTION_L          (35),
		.PKT_BURSTWRAP_H           (22),
		.PKT_BURSTWRAP_L           (22),
		.PKT_BYTE_CNT_H            (21),
		.PKT_BYTE_CNT_L            (19),
		.PKT_ADDR_H                (12),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (13),
		.PKT_TRANS_POSTED          (14),
		.PKT_TRANS_WRITE           (15),
		.PKT_TRANS_READ            (16),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (32),
		.PKT_SRC_ID_L              (32),
		.PKT_DEST_ID_H             (33),
		.PKT_DEST_ID_L             (33),
		.ST_DATA_W                 (47),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_0_m0_agent (
		.clk                   (clk_0_clk_clk),                                                     //       clk.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                 //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                  //          .data
		.rp_channel            (rsp_mux_src_channel),                                               //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                           //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                 //          .ready
		.av_response           (),                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (73),
		.PKT_ORI_BURST_SIZE_L      (71),
		.PKT_RESPONSE_STATUS_H     (70),
		.PKT_RESPONSE_STATUS_L     (69),
		.PKT_BURST_SIZE_H          (52),
		.PKT_BURST_SIZE_L          (50),
		.PKT_TRANS_LOCK            (44),
		.PKT_BEGIN_BURST           (57),
		.PKT_PROTECTION_H          (64),
		.PKT_PROTECTION_L          (62),
		.PKT_BURSTWRAP_H           (49),
		.PKT_BURSTWRAP_L           (49),
		.PKT_BYTE_CNT_H            (48),
		.PKT_BYTE_CNT_L            (46),
		.PKT_ADDR_H                (39),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (40),
		.PKT_TRANS_POSTED          (41),
		.PKT_TRANS_WRITE           (42),
		.PKT_TRANS_READ            (43),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (59),
		.PKT_SRC_ID_L              (59),
		.PKT_DEST_ID_H             (60),
		.PKT_DEST_ID_L             (60),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (74),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pio_0_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (pio_0_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (pio_0_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (pio_0_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (pio_0_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (pio_0_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (pio_0_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (pio_0_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (pio_0_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (pio_0_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (pio_0_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (pio_0_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (pio_0_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (pio_0_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (pio_0_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (pio_0_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (pio_0_s1_cmd_width_adapter_src_ready),          //              cp.ready
		.cp_valid                (pio_0_s1_cmd_width_adapter_src_valid),          //                .valid
		.cp_data                 (pio_0_s1_cmd_width_adapter_src_data),           //                .data
		.cp_startofpacket        (pio_0_s1_cmd_width_adapter_src_startofpacket),  //                .startofpacket
		.cp_endofpacket          (pio_0_s1_cmd_width_adapter_src_endofpacket),    //                .endofpacket
		.cp_channel              (pio_0_s1_cmd_width_adapter_src_channel),        //                .channel
		.rf_sink_ready           (pio_0_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (pio_0_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (pio_0_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (pio_0_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (pio_0_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (pio_0_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (pio_0_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (pio_0_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (pio_0_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (pio_0_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (pio_0_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_0_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (pio_0_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (75),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_0_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (pio_0_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (pio_0_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (pio_0_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (pio_0_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (pio_0_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (pio_0_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (pio_0_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (pio_0_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (pio_0_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	system_mm_interconnect_0_router router (
		.sink_ready         (mm_bridge_0_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (mm_bridge_0_m0_agent_cp_valid),                 //          .valid
		.sink_data          (mm_bridge_0_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (mm_bridge_0_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (pio_0_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (pio_0_s1_agent_rp_valid),                       //          .valid
		.sink_data          (pio_0_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (pio_0_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (pio_0_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                              //      sink.ready
		.sink_channel       (router_src_channel),                            //          .channel
		.sink_data          (router_src_data),                               //          .data
		.sink_startofpacket (router_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_src_valid),                              //          .valid
		.src0_ready         (cmd_demux_src0_ready),                          //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                          //          .valid
		.src0_data          (cmd_demux_src0_data),                           //          .data
		.src0_channel       (cmd_demux_src0_channel),                        //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                             //          .valid
		.src_data            (cmd_mux_src_data),                              //          .data
		.src_channel         (cmd_mux_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                        //          .channel
		.sink0_data          (cmd_demux_src0_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (pio_0_s1_rsp_width_adapter_src_ready),          //      sink.ready
		.sink_channel       (pio_0_s1_rsp_width_adapter_src_channel),        //          .channel
		.sink_data          (pio_0_s1_rsp_width_adapter_src_data),           //          .data
		.sink_startofpacket (pio_0_s1_rsp_width_adapter_src_startofpacket),  //          .startofpacket
		.sink_endofpacket   (pio_0_s1_rsp_width_adapter_src_endofpacket),    //          .endofpacket
		.sink_valid         (pio_0_s1_rsp_width_adapter_src_valid),          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                             //       src.ready
		.src_valid           (rsp_mux_src_valid),                             //          .valid
		.src_data            (rsp_mux_src_data),                              //          .data
		.src_channel         (rsp_mux_src_channel),                           //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                          //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                          //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                        //          .channel
		.sink0_data          (rsp_demux_src0_data),                           //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                     //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (12),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (21),
		.IN_PKT_BYTE_CNT_L             (19),
		.IN_PKT_TRANS_COMPRESSED_READ  (13),
		.IN_PKT_TRANS_WRITE            (15),
		.IN_PKT_BURSTWRAP_H            (22),
		.IN_PKT_BURSTWRAP_L            (22),
		.IN_PKT_BURST_SIZE_H           (25),
		.IN_PKT_BURST_SIZE_L           (23),
		.IN_PKT_RESPONSE_STATUS_H      (43),
		.IN_PKT_RESPONSE_STATUS_L      (42),
		.IN_PKT_TRANS_EXCLUSIVE        (18),
		.IN_PKT_BURST_TYPE_H           (27),
		.IN_PKT_BURST_TYPE_L           (26),
		.IN_PKT_ORI_BURST_SIZE_L       (44),
		.IN_PKT_ORI_BURST_SIZE_H       (46),
		.IN_ST_DATA_W                  (47),
		.OUT_PKT_ADDR_H                (39),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (48),
		.OUT_PKT_BYTE_CNT_L            (46),
		.OUT_PKT_TRANS_COMPRESSED_READ (40),
		.OUT_PKT_BURST_SIZE_H          (52),
		.OUT_PKT_BURST_SIZE_L          (50),
		.OUT_PKT_RESPONSE_STATUS_H     (70),
		.OUT_PKT_RESPONSE_STATUS_L     (69),
		.OUT_PKT_TRANS_EXCLUSIVE       (45),
		.OUT_PKT_BURST_TYPE_H          (54),
		.OUT_PKT_BURST_TYPE_L          (53),
		.OUT_PKT_ORI_BURST_SIZE_L      (71),
		.OUT_PKT_ORI_BURST_SIZE_H      (73),
		.OUT_ST_DATA_W                 (74),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pio_0_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                 //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                             //      sink.valid
		.in_channel           (cmd_mux_src_channel),                           //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                     //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                       //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                             //          .ready
		.in_data              (cmd_mux_src_data),                              //          .data
		.out_endofpacket      (pio_0_s1_cmd_width_adapter_src_endofpacket),    //       src.endofpacket
		.out_data             (pio_0_s1_cmd_width_adapter_src_data),           //          .data
		.out_channel          (pio_0_s1_cmd_width_adapter_src_channel),        //          .channel
		.out_valid            (pio_0_s1_cmd_width_adapter_src_valid),          //          .valid
		.out_ready            (pio_0_s1_cmd_width_adapter_src_ready),          //          .ready
		.out_startofpacket    (pio_0_s1_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (39),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (48),
		.IN_PKT_BYTE_CNT_L             (46),
		.IN_PKT_TRANS_COMPRESSED_READ  (40),
		.IN_PKT_TRANS_WRITE            (42),
		.IN_PKT_BURSTWRAP_H            (49),
		.IN_PKT_BURSTWRAP_L            (49),
		.IN_PKT_BURST_SIZE_H           (52),
		.IN_PKT_BURST_SIZE_L           (50),
		.IN_PKT_RESPONSE_STATUS_H      (70),
		.IN_PKT_RESPONSE_STATUS_L      (69),
		.IN_PKT_TRANS_EXCLUSIVE        (45),
		.IN_PKT_BURST_TYPE_H           (54),
		.IN_PKT_BURST_TYPE_L           (53),
		.IN_PKT_ORI_BURST_SIZE_L       (71),
		.IN_PKT_ORI_BURST_SIZE_H       (73),
		.IN_ST_DATA_W                  (74),
		.OUT_PKT_ADDR_H                (12),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (21),
		.OUT_PKT_BYTE_CNT_L            (19),
		.OUT_PKT_TRANS_COMPRESSED_READ (13),
		.OUT_PKT_BURST_SIZE_H          (25),
		.OUT_PKT_BURST_SIZE_L          (23),
		.OUT_PKT_RESPONSE_STATUS_H     (43),
		.OUT_PKT_RESPONSE_STATUS_L     (42),
		.OUT_PKT_TRANS_EXCLUSIVE       (18),
		.OUT_PKT_BURST_TYPE_H          (27),
		.OUT_PKT_BURST_TYPE_L          (26),
		.OUT_PKT_ORI_BURST_SIZE_L      (44),
		.OUT_PKT_ORI_BURST_SIZE_H      (46),
		.OUT_ST_DATA_W                 (47),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pio_0_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                 //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_001_src_valid),                          //      sink.valid
		.in_channel           (router_001_src_channel),                        //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_001_src_ready),                          //          .ready
		.in_data              (router_001_src_data),                           //          .data
		.out_endofpacket      (pio_0_s1_rsp_width_adapter_src_endofpacket),    //       src.endofpacket
		.out_data             (pio_0_s1_rsp_width_adapter_src_data),           //          .data
		.out_channel          (pio_0_s1_rsp_width_adapter_src_channel),        //          .channel
		.out_valid            (pio_0_s1_rsp_width_adapter_src_valid),          //          .valid
		.out_ready            (pio_0_s1_rsp_width_adapter_src_ready),          //          .ready
		.out_startofpacket    (pio_0_s1_rsp_width_adapter_src_startofpacket),  //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_0_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (pio_0_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (pio_0_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                  //         .error
	);

endmodule
